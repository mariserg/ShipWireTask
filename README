Files included:

inventory.csv

order_queue.csv -- doesn't have to be included. This file is generated by service.php and contains the queue of orders to process

DataSource.php -- Simplified simulation of the client sending requests to the server.
                  Calls service.php with parameters containing the order and source/stream ID.

service.php -- simplified simulation of a server receiving and processing requests from the client.
               The service validates the requests and adds them to a queue that will be processed by cron process processOrder.php.

Inventory.php -- Class for manipulations with the inventory

Order.php -- Class for manipulations with the order object

OrderQueue.php	--	Class for manipulation with the OrderQueue

processOrder.php -- cron process that takes orders from the queue and processes them

---------------------
Assumptions:

PHP and flat files are not the ideal way to implement the problem.
Better solution would probably utilize a relational database and a language that has more persistence (JAVA?).

For the sake of this task, the design of choice is the one that doesn't require any server or DB configuration.

The code doesn't simulate the possible concurrency issues, however file locking is present in the implementation.

BUGS:
ftruncate($handle, 0) on line 34 of OrderQueue doesn't do what expected. The idea was to clear the order_queue.csv once it's read in.
However, the design for this task is an extreme over-simplification, so it's not critical to fix this issue now.

----------------------
THE FLOW / STEPS TO EXECUTE:

rm order_queue.csv
php DataSource.php
cat order_queue.csv
php processOrder.php

